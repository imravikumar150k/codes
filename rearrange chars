Given a string with repeated characters, task is to rearrange characters in a string such that no two adjacent characters are same.

Note : It may be assumed that the string has only lowercase English alphabets.


Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains a single line containing a string of lowercase english alphabets.

Output:
For each test case in a new line print 1 if the generated sting doesn't contains any same adjacent characters, else if no such string is possible to be made print 0.
Constraints:
1<=T<=100
1<=length of string<=600

Example:
Input:
3
geeksforgeeks
bbbabaaacd
bbbbb

Output:
1
1
0

#include<iostream>
#include<math.h>
#include<map>
using namespace std;
int main()
 {
	int t;
	cin>>t;
	while(t--)
	{
	string str;
	cin>>str;
	map<char,int> m;
	map<char,int>::iterator i1;
	//m.insert(str,);
	for(int i=0;i<str.length();i++){
	    m[str[i]]+=1;
	}
	int flag=1;
	for(i1=m.begin();i1!=m.end();i1++){
	    //cout<<i1->first<<"->"<<i1->second<<endl;
	if(i1->second>(str.length()/2)) {
	    
	    flag=0;break;
	}
	
	}cout<<flag<<endl;
	}
}
